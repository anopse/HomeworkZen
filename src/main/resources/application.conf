homeworkzen {
  api {
    port = 8080
    interface = "localhost"
    authRealm = "REST API"
    askTimeout = 5000
    hashSalt = "homeworkzen-hashSalt-A7V1097ZNBJQTFYJTC83"
  }
}

akka {
  actor {
    provider = "cluster"

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo
    }

    kryo {
      # https://github.com/romix/akka-kryo-serialization for more information about configuration
      type = "graph"
      idstrategy = "default"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false
      resolve-subclasses = false
    }

    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  cluster {
    //seed-nodes = [
    //  "akka.tcp://homeworkzen@127.0.0.1:2551",
    //  "akka.tcp://homeworkzen@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s

  }

  # CoordinatedShutdown will run the tasks that are added to these
  # phases. The phases can be ordered as a DAG by defining the
  # dependencies between the phases.
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # depends-on=[]: Run the phase after the given phases
  coordinated-shutdown {
    phases {

      # The first pre-defined phase that applications can add tasks to.
      # Note that more phases can be be added in the application's
      # configuration by overriding this phase with an additional
      # depends-on.
      before-service-unbind {
      }

      # Stop accepting new incoming requests in for example HTTP.
      service-unbind {
        depends-on = [before-service-unbind]
      }

      # Wait for requests that are in progress to be completed.
      service-requests-done {
        depends-on = [service-unbind]
      }

      # Final shutdown of service endpoints.
      service-stop {
        depends-on = [service-requests-done]
      }

      # Phase for custom application tasks that are to be run
      # after service shutdown and before cluster shutdown.
      before-cluster-shutdown {
        depends-on = [service-stop]
      }

      # Graceful shutdown of the Cluster Sharding regions.
      cluster-sharding-shutdown-region {
        timeout = 10 s
        depends-on = [before-cluster-shutdown]
      }

      # Emit the leave command for the node that is shutting down.
      cluster-leave {
        depends-on = [cluster-sharding-shutdown-region]
      }

      # Shutdown cluster singletons
      cluster-exiting {
        timeout = 10 s
        depends-on = [cluster-leave]
      }

      # Wait until exiting has been completed
      cluster-exiting-done {
        depends-on = [cluster-exiting]
      }

      # Shutdown the cluster extension
      cluster-shutdown {
        depends-on = [cluster-exiting-done]
      }

      # Phase for custom application tasks that are to be run
      # after cluster shutdown and before ActorSystem termination.
      before-actor-system-terminate {
        depends-on = [cluster-shutdown]
      }

      # Last phase. See terminate-actor-system and exit-jvm above.
      # Don't add phases that depends on this phase because the
      # dispatcher and scheduler of the ActorSystem have been shutdown.
      actor-system-terminate {
        timeout = 10 s
        depends-on = [before-actor-system-terminate]
      }
    }

    exit-jvm = on
  }

}}

swagger.filter = "SwaggerConfigurationFilter"


jdbc-journal {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes

  recovery-event-timeout = 60m

  event-adapters {
    tagging = "homeworkzen.domain.utils.TaggingEventAdapter"
  }

  event-adapter-bindings {
    "homeworkzen.domain.command.message.Event" = tagging
  }
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  refresh-interval = "100ms"

  max-buffer-size = "250"

  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

slick {
  driver = "slick.jdbc.MySQLProfile$"
  db {
    host = "localhost"
    host = ${?MYSQL_HOST}
    port = "3306"
    port = ${?MYSQL_PORT}
    dbName = "zen"
    url = "jdbc:mysql://"${slick.db.host}":"${slick.db.port}"/"${slick.db.dbName}"?cachePrepStmts=true&cacheCallableStmts=true&cacheServerConfiguration=true&useLocalSessionState=true&elideSetAutoCommits=true&alwaysSendSetIsolation=false&enableQueryTimeouts=false&connectionAttributes=none&verifyServerCertificate=false&useSSL=false&useUnicode=true&useLegacyDatetimeCode=false&serverTimezone=UTC&rewriteBatchedStatements=true"
    user = "root"
    user = ${?MYSQL_USER}
    password = "root"
    password = ${?MYSQL_PASSWORD}
    driver = "com.mysql.cj.jdbc.Driver"
    connectionTestQuery = "SELECT 1"
  }
}